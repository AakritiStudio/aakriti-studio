"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/use-shopping-cart";
exports.ids = ["vendor-chunks/use-shopping-cart"];
exports.modules = {

/***/ "(ssr)/./node_modules/use-shopping-cart/dist/react.js":
/*!******************************************************!*\
  !*** ./node_modules/use-shopping-cart/dist/react.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/* __next_internal_client_entry_do_not_use__  cjs */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar toolkit = __webpack_require__(/*! @reduxjs/toolkit */ \"(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js\");\nvar dateFns = __webpack_require__(/*! date-fns */ \"(ssr)/./node_modules/date-fns/esm/index.js\");\nvar uuid = __webpack_require__(/*! uuid */ \"(ssr)/./node_modules/uuid/dist/esm-node/index.js\");\nvar reduxPersist = __webpack_require__(/*! redux-persist */ \"(ssr)/./node_modules/redux-persist/es/index.js\");\n__webpack_require__(/*! @stripe/stripe-js */ \"(ssr)/./node_modules/use-shopping-cart/node_modules/@stripe/stripe-js/dist/stripe.esm.js\");\nvar reactRedux = __webpack_require__(/*! react-redux */ \"(ssr)/./node_modules/react-redux/es/index.js\");\nvar react = __webpack_require__(/*! redux-persist/integration/react */ \"(ssr)/./node_modules/redux-persist/es/integration/react.js\");\nfunction _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = Object.create(null);\n    if (e) {\n        Object.keys(e).forEach(function(k) {\n            if (k !== \"default\") {\n                var d = Object.getOwnPropertyDescriptor(e, k);\n                Object.defineProperty(n, k, d.get ? d : {\n                    enumerable: true,\n                    get: function() {\n                        return e[k];\n                    }\n                });\n            }\n        });\n    }\n    n[\"default\"] = e;\n    return Object.freeze(n);\n}\nvar React__namespace = /*#__PURE__*/ _interopNamespace(React);\nconst isClient = \"undefined\" === \"object\";\nconst formatCurrencyString = ({ value, currency, language = isClient ? navigator.language : \"en-US\" })=>{\n    const numberFormat = new Intl.NumberFormat(language, {\n        style: \"currency\",\n        currency,\n        currencyDisplay: \"symbol\"\n    });\n    const parts = numberFormat.formatToParts(value);\n    let zeroDecimalCurrency = true;\n    for (const part of parts){\n        if (part.type === \"decimal\") {\n            zeroDecimalCurrency = false;\n            break;\n        }\n    }\n    value = zeroDecimalCurrency ? value : parseFloat((value / 100).toFixed(2));\n    return numberFormat.format(value);\n};\nfunction updateFormattedTotalPrice(state) {\n    state.formattedTotalPrice = formatCurrencyString({\n        value: state.totalPrice,\n        currency: state.currency,\n        language: state.language\n    });\n}\nfunction updateFormattedValue(state, id) {\n    state.cartDetails[id].formattedValue = formatCurrencyString({\n        value: state.cartDetails[id].value,\n        currency: state.currency,\n        language: state.language\n    });\n}\nfunction updateFormattedPrice(state, id) {\n    state.cartDetails[id].formattedPrice = formatCurrencyString({\n        value: state.cartDetails[id].price,\n        currency: state.currency,\n        language: state.language\n    });\n}\nfunction Entry({ id, product, quantity, price_metadata, product_metadata }) {\n    return {\n        ...product,\n        id,\n        quantity,\n        value: product.price * quantity,\n        timestamp: new Date().toISOString(),\n        price_data: {\n            ...product.price_data,\n            ...price_metadata\n        },\n        product_data: {\n            ...product.product_data,\n            ...product_metadata\n        }\n    };\n}\nfunction createEntry({ state, id, product, count, price_metadata, product_metadata }) {\n    const entry = Entry({\n        id,\n        product,\n        quantity: count,\n        price_metadata,\n        product_metadata,\n        timestamp: dateFns.formatISO(new Date())\n    });\n    state.cartDetails[id] = entry;\n    updateFormattedValue(state, id);\n    updateFormattedPrice(state, id);\n    state.totalPrice += entry.value;\n    state.cartCount += count;\n    updateFormattedTotalPrice(state);\n}\nfunction updateEntry({ state, id, count, price_metadata, product_metadata }) {\n    const entry = state.cartDetails[id];\n    if (entry.quantity + count <= 0) return removeEntry({\n        state,\n        id\n    });\n    state.cartDetails[id] = Entry({\n        id,\n        state,\n        product: entry,\n        quantity: entry.quantity + count,\n        price_metadata,\n        product_metadata\n    });\n    updateFormattedValue(state, id);\n    state.totalPrice += entry.price * count;\n    state.cartCount += count;\n    updateFormattedTotalPrice(state);\n}\nfunction removeEntry({ state, id }) {\n    const cartDetails = state.cartDetails;\n    state.totalPrice -= cartDetails[id].value;\n    state.cartCount -= cartDetails[id].quantity;\n    delete cartDetails[id];\n    updateFormattedTotalPrice(state);\n}\nfunction updateQuantity({ state, id, quantity }) {\n    const entry = state.cartDetails[id];\n    updateEntry({\n        state,\n        id,\n        count: quantity - entry.quantity\n    });\n}\nconst initialState = {\n    cartMode: \"checkout-session\",\n    mode: \"payment\",\n    currency: \"USD\",\n    language: isClient ? navigator.language : \"en-US\",\n    lastClicked: \"\",\n    shouldDisplayCart: false,\n    cartCount: 0,\n    totalPrice: 0,\n    formattedTotalPrice: \"\",\n    cartDetails: {},\n    stripe: \"\",\n    shouldPersist: true\n};\nconst slice = toolkit.createSlice({\n    name: \"cart\",\n    initialState,\n    reducers: {\n        addItem: {\n            reducer (state, { payload: { product, options } }) {\n                const { count, price_metadata, product_metadata } = options;\n                const id = product.id || product.price_id || product.sku_id || product.sku || uuid.v4();\n                if (id in state.cartDetails) {\n                    updateEntry({\n                        state,\n                        id,\n                        count,\n                        price_metadata,\n                        product_metadata\n                    });\n                } else {\n                    createEntry({\n                        state,\n                        id,\n                        product,\n                        count,\n                        price_metadata,\n                        product_metadata\n                    });\n                }\n            },\n            prepare (product, options = {\n                count: 1\n            }) {\n                if (!options.price_metadata) options.price_metadata = {};\n                if (!options.product_metadata) options.product_metadata = {};\n                if (!options.count) options.count = 1;\n                return {\n                    payload: {\n                        product,\n                        options\n                    }\n                };\n            }\n        },\n        incrementItem: {\n            reducer (state, { payload: { id, options } }) {\n                updateEntry({\n                    state,\n                    id,\n                    count: options.count\n                });\n            },\n            prepare (id, options = {\n                count: 1\n            }) {\n                return {\n                    payload: {\n                        id,\n                        options\n                    }\n                };\n            }\n        },\n        decrementItem: {\n            reducer (state, { payload: { id, options } }) {\n                if (state.cartDetails[id].quantity - options.count <= 0) return removeEntry({\n                    state,\n                    id\n                });\n                updateEntry({\n                    state,\n                    id,\n                    count: -options.count\n                });\n            },\n            prepare (id, options = {\n                count: 1\n            }) {\n                return {\n                    payload: {\n                        id,\n                        options\n                    }\n                };\n            }\n        },\n        clearCart: {\n            reducer (state) {\n                state.cartCount = 0;\n                state.totalPrice = 0;\n                state.cartDetails = {};\n                updateFormattedTotalPrice(state);\n            }\n        },\n        setItemQuantity: {\n            reducer (state, { payload: { id, quantity } }) {\n                if (quantity > 0 && id in state.cartDetails) return updateQuantity({\n                    ...state,\n                    state,\n                    id,\n                    quantity\n                });\n                else if (quantity === 0) return removeEntry({\n                    state,\n                    id\n                });\n            },\n            prepare (id, quantity) {\n                return {\n                    payload: {\n                        id,\n                        quantity\n                    }\n                };\n            }\n        },\n        removeItem: {\n            reducer (state, { payload: { id } }) {\n                removeEntry({\n                    state,\n                    id\n                });\n            },\n            prepare (id) {\n                return {\n                    payload: {\n                        id\n                    }\n                };\n            }\n        },\n        loadCart: {\n            reducer (state, { payload: { cartDetails, shouldMerge } }) {\n                if (!shouldMerge) {\n                    state.cartCount = 0;\n                    state.totalPrice = 0;\n                    state.cartDetails = {};\n                }\n                for(const id in cartDetails){\n                    const entry = cartDetails[id];\n                    createEntry({\n                        state,\n                        id: entry.id,\n                        product: entry,\n                        count: entry.quantity\n                    });\n                }\n            },\n            prepare (cartDetails, shouldMerge = true) {\n                return {\n                    payload: {\n                        cartDetails,\n                        shouldMerge\n                    }\n                };\n            }\n        },\n        handleCartHover (state) {\n            state.shouldDisplayCart = true;\n        },\n        handleCartClick (state) {\n            state.shouldDisplayCart = !state.shouldDisplayCart;\n        },\n        handleCloseCart (state) {\n            state.shouldDisplayCart = false;\n        },\n        storeLastClicked (state, { payload }) {\n            state.lastClicked = payload;\n        },\n        changeStripeKey (state, { payload }) {\n            state.stripe = payload;\n        },\n        changeLanguage (state, { payload }) {\n            state.language = payload;\n        },\n        changeCurrency (state, { payload }) {\n            state.currency = payload;\n        }\n    }\n});\nslice.actions.redirectToCheckout = (sessionId)=>({\n        type: \"cart/redirectToCheckout\",\n        payload: {\n            sessionId\n        }\n    });\nslice.actions.checkoutSingleItem = (itemsOrPriceId)=>{\n    const quantity = itemsOrPriceId.quantity || 1;\n    const cartItems = (()=>{\n        if (typeof itemsOrPriceId === \"string\") {\n            return {\n                lineItems: [\n                    {\n                        price: itemsOrPriceId,\n                        quantity\n                    }\n                ]\n            };\n        }\n        if (Object.prototype.hasOwnProperty.call(itemsOrPriceId, \"price\")) {\n            return {\n                lineItems: [\n                    {\n                        price: itemsOrPriceId.price,\n                        quantity\n                    }\n                ]\n            };\n        }\n        /**\r\n     * Backward compatibility (SKU)\r\n     */ if (Object.prototype.hasOwnProperty.call(itemsOrPriceId, \"sku\")) {\n            return {\n                items: [\n                    {\n                        sku: itemsOrPriceId.sku,\n                        quantity\n                    }\n                ]\n            };\n        }\n        return [];\n    })();\n    return {\n        type: \"cart/checkoutSingleItem\",\n        payload: {\n            cartItems\n        }\n    };\n};\nconst { reducer, actions } = slice;\n/**\r\n * Returns the constructor name of any value.\r\n * @param {any} value\r\n * @returns string\r\n */ function typeOf(value) {\n    if (value === undefined) return \"undefined\";\n    if (value === null) return \"null\";\n    return value.constructor.name;\n}\nclass PropertyValueError extends Error {\n    constructor({ property, method, expected, received }){\n        const plural = Array.isArray(expected);\n        const expectedString = plural ? `are ${expected.map((v)=>JSON.stringify(v)).join(\", \")}` : `is ${JSON.stringify(expected)}`;\n        const methodString = typeof method === \"string\" ? ` in ${method}()` : \"\";\n        super(`Invalid value ${JSON.stringify(received)} was received for ${property}. Valid ${plural ? \"values\" : \"value\"} for ${property}${methodString} ${expectedString}.`);\n        this.name = \"PropertyValueError\";\n    }\n}\nclass PropertyTypeError extends TypeError {\n    constructor({ property, expected, received }){\n        const plural = Array.isArray(expected);\n        const expectedString = plural ? `are ${expected.map((v)=>JSON.stringify(v)).join(\", \")}` : `is ${JSON.stringify(expected)}`;\n        super(`Invalid value with type ${JSON.stringify(received)} was received for ${property}. Valid ${plural ? \"types\" : \"type\"} for ${property} ${expectedString}.`);\n        this.name = \"PropertyTypeError\";\n    }\n}\nclass PropertyRangeError extends RangeError {\n    constructor({ property, between, below, above, received }){\n        let expectedString;\n        if (Array.isArray(between)) expectedString = `between ${between[0]} and ${between[1]}`;\n        else if ([\n            \"string\",\n            \"number\"\n        ].includes(typeof below)) expectedString = `below ${below}`;\n        else if ([\n            \"string\",\n            \"number\"\n        ].includes(typeof above)) expectedString = `above ${above}`;\n        super(`Invalid value ${JSON.stringify(received)} was received for ${property}. Valid range for ${property} is ${expectedString}.`);\n        this.name = \"PropertyRangeError\";\n    }\n}\nfunction _optionalChain(ops) {\n    let lastAccessLHS = undefined;\n    let value = ops[0];\n    let i = 1;\n    while(i < ops.length){\n        const op = ops[i];\n        const fn = ops[i + 1];\n        i += 2;\n        if ((op === \"optionalAccess\" || op === \"optionalCall\") && value == null) {\n            return undefined;\n        }\n        if (op === \"access\" || op === \"optionalAccess\") {\n            lastAccessLHS = value;\n            value = fn(value);\n        } else if (op === \"call\" || op === \"optionalCall\") {\n            value = fn((...args)=>value.call(lastAccessLHS, ...args));\n            lastAccessLHS = undefined;\n        }\n    }\n    return value;\n}\nfunction getCheckoutData(cart) {\n    const lineItems = [];\n    for(const sku in cart.cartDetails)lineItems.push({\n        price: sku,\n        quantity: cart.cartDetails[sku].quantity\n    });\n    const options = {\n        mode: cart.mode,\n        lineItems,\n        successUrl: cart.successUrl,\n        cancelUrl: cart.cancelUrl,\n        billingAddressCollection: cart.billingAddressCollection ? \"required\" : \"auto\",\n        submitType: \"auto\"\n    };\n    if (_optionalChain([\n        cart,\n        \"access\",\n        (_)=>_.allowedCountries,\n        \"optionalAccess\",\n        (_2)=>_2.length\n    ])) {\n        options.shippingAddressCollection = {\n            allowedCountries: cart.allowedCountries\n        };\n    }\n    return options;\n}\nconst handleStripe = (store)=>(next)=>async (action)=>{\n            const stripePublicKey = store.getState().stripe;\n            const cart = store.getState();\n            const checkout = [\n                \"cart/redirectToCheckout\",\n                \"cart/checkoutSingleItem\"\n            ];\n            if (checkout.includes(action.type)) {\n                if (typeof stripePublicKey !== \"string\") {\n                    throw new PropertyTypeError({\n                        property: \"stripe\",\n                        expected: \"string\",\n                        received: typeOf(stripePublicKey)\n                    });\n                } else if (stripePublicKey.length === 0) {\n                    throw new PropertyRangeError({\n                        property: \"stripe.length\",\n                        above: 0,\n                        received: stripePublicKey.length\n                    });\n                }\n            }\n            if (action.type === \"cart/redirectToCheckout\") {\n                const stripe = initializeStripe(stripePublicKey);\n                if (cart.cartMode === \"checkout-session\") {\n                    return stripe.redirectToCheckout({\n                        sessionId: action.payload.sessionId\n                    });\n                } else if (cart.cartMode === \"client-only\") {\n                    const checkoutData = getCheckoutData(cart);\n                    return stripe.redirectToCheckout(checkoutData);\n                } else {\n                    throw new PropertyValueError({\n                        property: \"cartMode\",\n                        method: \"redirectToCheckout\",\n                        expected: [\n                            \"client-only\",\n                            \"checkout-session\"\n                        ],\n                        received: cart.cartMode\n                    });\n                }\n            } else if (action.type === \"cart/checkoutSingleItem\") {\n                const stripe = initializeStripe(stripePublicKey);\n                if (cart.cartMode === \"client-only\") {\n                    const options = {\n                        mode: cart.mode,\n                        successUrl: cart.successUrl,\n                        cancelUrl: cart.cancelUrl,\n                        ...action.payload.cartItems\n                    };\n                    return stripe.redirectToCheckout(options);\n                } else {\n                    throw new PropertyValueError({\n                        property: \"cartMode\",\n                        method: \"checkoutSingleItem\",\n                        expected: \"client-only\",\n                        received: cart.cartMode\n                    });\n                }\n            }\n            return next(action);\n        };\nfunction initializeStripe(publicKey) {\n    try {\n        // eslint-disable-next-line no-undef\n        const stripe = Stripe(publicKey);\n        stripe.registerAppInfo({\n            name: \"use-shopping-cart\",\n            version: \"3.2.0\",\n            url: \"https://useshoppingcart.com\",\n            // eslint-disable-next-line camelcase\n            partner_id: \"pp_partner_H8MLmI3e9Oc3IK\"\n        });\n        return stripe;\n    } catch (error) {\n        console.error(\"Unable to initialize Stripe.\");\n        throw error;\n    }\n}\nconst handleWarnings = (store)=>(next)=>async (action)=>{\n            const count = [\n                \"cart/addItem\",\n                \"cart/incrementItem\",\n                \"cart/decrementItem\"\n            ];\n            if (count.includes(action.type) && typeof action.payload.options.count !== \"number\") {\n                console.warn(`Invalid count used with action ${action.type}: count must be a number. The current type is ${typeOf(action.payload.options.count)}.`, action);\n                return;\n            }\n            const quantity = [\n                \"cart/setItemQuantity\"\n            ];\n            if (quantity.includes(action.type)) {\n                if (typeof action.payload.quantity !== \"number\") {\n                    console.warn(`Invalid quantity used with action ${action.type}: quantity must be a number. The current type is ${typeOf(action.payload.quantity)}.`, action);\n                    return;\n                } else if (action.payload.quantity < 0) {\n                    console.warn(`Invalid quantity used with action ${action.type}: quantity must be greater than zero. The current value is ${JSON.stringify(action.payload.quantity)}.`, action);\n                    return;\n                }\n            }\n            const id = [\n                \"cart/incrementItem\",\n                \"cart/decrementItem\",\n                \"cart/removeItem\"\n            ];\n            if (id.includes(action.type) && !(action.payload.id in store.getState().cartDetails)) {\n                console.warn(`Invalid product ID used with action ${action.type}: the ID must already be in the cart. The current value is ${JSON.stringify(action.payload.id)}.`, action);\n                return;\n            }\n            return next(action);\n        };\nfunction _nullishCoalesce(lhs, rhsFn) {\n    if (lhs != null) {\n        return lhs;\n    } else {\n        return rhsFn();\n    }\n}\nasync function filterCart(cartDetails, filter) {\n    const filteredCart = {};\n    for(const sku in cartDetails){\n        const entry = cartDetails[sku];\n        if (await filter(entry)) filteredCart[sku] = entry;\n    }\n    return filteredCart;\n}\nfunction noop() {}\nfunction createNoopStorage() {\n    return {\n        getItem: noop,\n        setItem: noop,\n        removeItem: noop\n    };\n}\nfunction createLocalStorage() {\n    return {\n        async getItem (key) {\n            return window.localStorage.getItem(key);\n        },\n        async setItem (key, value) {\n            return window.localStorage.setItem(key, value);\n        },\n        async removeItem (key) {\n            return window.localStorage.removeItem(key);\n        }\n    };\n}\nfunction createShoppingCartStore(options) {\n    options.shouldPersist = _nullishCoalesce(options.shouldPersist, ()=>true);\n    if (!isClient) {\n        return toolkit.configureStore({\n            reducer,\n            preloadedState: {\n                ...initialState,\n                ...options\n            }\n        });\n    }\n    let storage;\n    if (isClient) storage = options.storage || createLocalStorage();\n    else storage = createNoopStorage();\n    delete options.storage;\n    const persistConfig = {\n        key: _nullishCoalesce(options.persistKey, ()=>\"root\"),\n        version: 1,\n        storage,\n        whitelist: [\n            \"cartCount\",\n            \"totalPrice\",\n            \"formattedTotalPrice\",\n            \"cartDetails\"\n        ]\n    };\n    const persistedReducer = reduxPersist.persistReducer(persistConfig, reducer);\n    const newInitialState = {\n        ...initialState,\n        ...options\n    };\n    updateFormattedTotalPrice(newInitialState);\n    return toolkit.configureStore({\n        reducer: options.shouldPersist ? persistedReducer : reducer,\n        preloadedState: newInitialState,\n        middleware: (getDefaultMiddleware)=>getDefaultMiddleware({\n                serializableCheck: {\n                    ignoredActions: [\n                        reduxPersist.FLUSH,\n                        reduxPersist.REHYDRATE,\n                        reduxPersist.PAUSE,\n                        reduxPersist.PERSIST,\n                        reduxPersist.PURGE,\n                        reduxPersist.REGISTER\n                    ],\n                    ignoredActionPaths: [\n                        \"persist\"\n                    ]\n                }\n            }).concat(handleStripe, handleWarnings)\n    });\n}\nconst _jsxFileName = \"/Users/nickdejesus/Code/hooks/use-shopping-cart/use-shopping-cart/react/index.js\";\nconst CartContext = React__namespace.createContext(initialState);\nconst useSelector = reactRedux.createSelectorHook(CartContext);\nconst useDispatch = reactRedux.createDispatchHook(CartContext);\nfunction CartProvider({ loading = null, children, ...props }) {\n    const [isClient, setIsClient] = React__namespace.useState(false);\n    React__namespace.useEffect(()=>{\n        setIsClient(true);\n    }, []);\n    const store = React__namespace.useMemo(()=>createShoppingCartStore(props), [\n        props\n    ]);\n    if (props.shouldPersist && isClient) {\n        const persistor = reduxPersist.persistStore(store);\n        return React__namespace.createElement(reactRedux.Provider, {\n            context: CartContext,\n            store: store,\n            __self: this,\n            __source: {\n                fileName: _jsxFileName,\n                lineNumber: 33\n            }\n        }, React__namespace.createElement(react.PersistGate, {\n            persistor: persistor,\n            __self: this,\n            __source: {\n                fileName: _jsxFileName,\n                lineNumber: 34\n            }\n        }, ()=>children));\n    } else {\n        return React__namespace.createElement(reactRedux.Provider, {\n            context: CartContext,\n            store: store,\n            __self: this,\n            __source: {\n                fileName: _jsxFileName,\n                lineNumber: 39\n            }\n        }, children);\n    }\n}\nfunction useShoppingCart(selector = (state)=>({\n        ...state\n    }), equalityFn) {\n    const dispatch = useDispatch();\n    const cartState = useSelector(selector, equalityFn);\n    const shoppingCart = React__namespace.useMemo(()=>{\n        const cartActions = toolkit.bindActionCreators(actions, dispatch);\n        return {\n            ...cartState,\n            ...cartActions\n        };\n    }, [\n        cartState,\n        dispatch\n    ]);\n    React__namespace.useDebugValue(shoppingCart);\n    return shoppingCart;\n}\nfunction DebugCart(props) {\n    const cart = useShoppingCart((state)=>state);\n    const cartPropertyRows = Object.entries(cart).filter(([, value])=>typeof value !== \"function\").map(([key, value])=>React__namespace.createElement(\"tr\", {\n            key: key,\n            __self: this,\n            __source: {\n                fileName: _jsxFileName,\n                lineNumber: 67\n            }\n        }, React__namespace.createElement(\"td\", {\n            __self: this,\n            __source: {\n                fileName: _jsxFileName,\n                lineNumber: 68\n            }\n        }, key), React__namespace.createElement(\"td\", {\n            __self: this,\n            __source: {\n                fileName: _jsxFileName,\n                lineNumber: 69\n            }\n        }, typeof value === \"object\" ? React__namespace.createElement(\"button\", {\n            onClick: ()=>console.log(value),\n            __self: this,\n            __source: {\n                fileName: _jsxFileName,\n                lineNumber: 71\n            }\n        }, \"Log value\") : JSON.stringify(value))));\n    return React__namespace.createElement(\"div\", {\n        style: {\n            position: \"fixed\",\n            top: 50,\n            right: 50,\n            backgroundColor: \"#eee\",\n            textAlign: \"left\",\n            maxWidth: 300,\n            padding: 20,\n            borderSpacing: \"25px 5px\",\n            overflow: \"auto\"\n        },\n        ...props,\n        __self: this,\n        __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n        }\n    }, React__namespace.createElement(\"table\", {\n        __self: this,\n        __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n        }\n    }, React__namespace.createElement(\"thead\", {\n        __self: this,\n        __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n        }\n    }, React__namespace.createElement(\"tr\", {\n        __self: this,\n        __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n        }\n    }, React__namespace.createElement(\"th\", {\n        __self: this,\n        __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n        }\n    }, \"Key\"), React__namespace.createElement(\"th\", {\n        __self: this,\n        __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n        }\n    }, \"Value\"))), React__namespace.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n        }\n    }, cartPropertyRows)));\n}\nexports.CartContext = CartContext;\nexports.CartProvider = CartProvider;\nexports.DebugCart = DebugCart;\nexports.actions = actions;\nexports.filterCart = filterCart;\nexports.formatCurrencyString = formatCurrencyString;\nexports.useDispatch = useDispatch;\nexports.useSelector = useSelector;\nexports.useShoppingCart = useShoppingCart; //# sourceMappingURL=react.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/use-shopping-cart/dist/react.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/use-shopping-cart/node_modules/@stripe/stripe-js/dist/stripe.esm.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/use-shopping-cart/node_modules/@stripe/stripe-js/dist/stripe.esm.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadStripe: () => (/* binding */ loadStripe)\n/* harmony export */ });\nvar V3_URL = 'https://js.stripe.com/v3';\nvar V3_URL_REGEX = /^https:\\/\\/js\\.stripe\\.com\\/v3\\/?(\\?.*)?$/;\nvar EXISTING_SCRIPT_MESSAGE = 'loadStripe.setLoadParameters was called but an existing Stripe.js script already exists in the document; existing script parameters will be used';\nvar findScript = function findScript() {\n  var scripts = document.querySelectorAll(\"script[src^=\\\"\".concat(V3_URL, \"\\\"]\"));\n\n  for (var i = 0; i < scripts.length; i++) {\n    var script = scripts[i];\n\n    if (!V3_URL_REGEX.test(script.src)) {\n      continue;\n    }\n\n    return script;\n  }\n\n  return null;\n};\n\nvar injectScript = function injectScript(params) {\n  var queryString = params && !params.advancedFraudSignals ? '?advancedFraudSignals=false' : '';\n  var script = document.createElement('script');\n  script.src = \"\".concat(V3_URL).concat(queryString);\n  var headOrBody = document.head || document.body;\n\n  if (!headOrBody) {\n    throw new Error('Expected document.body not to be null. Stripe.js requires a <body> element.');\n  }\n\n  headOrBody.appendChild(script);\n  return script;\n};\n\nvar registerWrapper = function registerWrapper(stripe, startTime) {\n  if (!stripe || !stripe._registerWrapper) {\n    return;\n  }\n\n  stripe._registerWrapper({\n    name: 'stripe-js',\n    version: \"1.54.2\",\n    startTime: startTime\n  });\n};\n\nvar stripePromise = null;\nvar loadScript = function loadScript(params) {\n  // Ensure that we only attempt to load Stripe.js at most once\n  if (stripePromise !== null) {\n    return stripePromise;\n  }\n\n  stripePromise = new Promise(function (resolve, reject) {\n    if (typeof window === 'undefined' || typeof document === 'undefined') {\n      // Resolve to null when imported server side. This makes the module\n      // safe to import in an isomorphic code base.\n      resolve(null);\n      return;\n    }\n\n    if (window.Stripe && params) {\n      console.warn(EXISTING_SCRIPT_MESSAGE);\n    }\n\n    if (window.Stripe) {\n      resolve(window.Stripe);\n      return;\n    }\n\n    try {\n      var script = findScript();\n\n      if (script && params) {\n        console.warn(EXISTING_SCRIPT_MESSAGE);\n      } else if (!script) {\n        script = injectScript(params);\n      }\n\n      script.addEventListener('load', function () {\n        if (window.Stripe) {\n          resolve(window.Stripe);\n        } else {\n          reject(new Error('Stripe.js not available'));\n        }\n      });\n      script.addEventListener('error', function () {\n        reject(new Error('Failed to load Stripe.js'));\n      });\n    } catch (error) {\n      reject(error);\n      return;\n    }\n  });\n  return stripePromise;\n};\nvar initStripe = function initStripe(maybeStripe, args, startTime) {\n  if (maybeStripe === null) {\n    return null;\n  }\n\n  var stripe = maybeStripe.apply(undefined, args);\n  registerWrapper(stripe, startTime);\n  return stripe;\n}; // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\n// own script injection.\n\nvar stripePromise$1 = Promise.resolve().then(function () {\n  return loadScript(null);\n});\nvar loadCalled = false;\nstripePromise$1[\"catch\"](function (err) {\n  if (!loadCalled) {\n    console.warn(err);\n  }\n});\nvar loadStripe = function loadStripe() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  loadCalled = true;\n  var startTime = Date.now();\n  return stripePromise$1.then(function (maybeStripe) {\n    return initStripe(maybeStripe, args, startTime);\n  });\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdXNlLXNob3BwaW5nLWNhcnQvbm9kZV9tb2R1bGVzL0BzdHJpcGUvc3RyaXBlLWpzL2Rpc3Qvc3RyaXBlLmVzbS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBLHdJQUF3STtBQUN4STtBQUNBOztBQUVBLGtCQUFrQixvQkFBb0I7QUFDdEM7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7O0FBRUE7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0Esc0VBQXNFLGFBQWE7QUFDbkY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFc0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9kdWN0LXNlbGwvLi9ub2RlX21vZHVsZXMvdXNlLXNob3BwaW5nLWNhcnQvbm9kZV9tb2R1bGVzL0BzdHJpcGUvc3RyaXBlLWpzL2Rpc3Qvc3RyaXBlLmVzbS5qcz8wNTFkIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBWM19VUkwgPSAnaHR0cHM6Ly9qcy5zdHJpcGUuY29tL3YzJztcbnZhciBWM19VUkxfUkVHRVggPSAvXmh0dHBzOlxcL1xcL2pzXFwuc3RyaXBlXFwuY29tXFwvdjNcXC8/KFxcPy4qKT8kLztcbnZhciBFWElTVElOR19TQ1JJUFRfTUVTU0FHRSA9ICdsb2FkU3RyaXBlLnNldExvYWRQYXJhbWV0ZXJzIHdhcyBjYWxsZWQgYnV0IGFuIGV4aXN0aW5nIFN0cmlwZS5qcyBzY3JpcHQgYWxyZWFkeSBleGlzdHMgaW4gdGhlIGRvY3VtZW50OyBleGlzdGluZyBzY3JpcHQgcGFyYW1ldGVycyB3aWxsIGJlIHVzZWQnO1xudmFyIGZpbmRTY3JpcHQgPSBmdW5jdGlvbiBmaW5kU2NyaXB0KCkge1xuICB2YXIgc2NyaXB0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJzY3JpcHRbc3JjXj1cXFwiXCIuY29uY2F0KFYzX1VSTCwgXCJcXFwiXVwiKSk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzY3JpcHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNjcmlwdCA9IHNjcmlwdHNbaV07XG5cbiAgICBpZiAoIVYzX1VSTF9SRUdFWC50ZXN0KHNjcmlwdC5zcmMpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2NyaXB0O1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuXG52YXIgaW5qZWN0U2NyaXB0ID0gZnVuY3Rpb24gaW5qZWN0U2NyaXB0KHBhcmFtcykge1xuICB2YXIgcXVlcnlTdHJpbmcgPSBwYXJhbXMgJiYgIXBhcmFtcy5hZHZhbmNlZEZyYXVkU2lnbmFscyA/ICc/YWR2YW5jZWRGcmF1ZFNpZ25hbHM9ZmFsc2UnIDogJyc7XG4gIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgc2NyaXB0LnNyYyA9IFwiXCIuY29uY2F0KFYzX1VSTCkuY29uY2F0KHF1ZXJ5U3RyaW5nKTtcbiAgdmFyIGhlYWRPckJvZHkgPSBkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmJvZHk7XG5cbiAgaWYgKCFoZWFkT3JCb2R5KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBkb2N1bWVudC5ib2R5IG5vdCB0byBiZSBudWxsLiBTdHJpcGUuanMgcmVxdWlyZXMgYSA8Ym9keT4gZWxlbWVudC4nKTtcbiAgfVxuXG4gIGhlYWRPckJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgcmV0dXJuIHNjcmlwdDtcbn07XG5cbnZhciByZWdpc3RlcldyYXBwZXIgPSBmdW5jdGlvbiByZWdpc3RlcldyYXBwZXIoc3RyaXBlLCBzdGFydFRpbWUpIHtcbiAgaWYgKCFzdHJpcGUgfHwgIXN0cmlwZS5fcmVnaXN0ZXJXcmFwcGVyKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3RyaXBlLl9yZWdpc3RlcldyYXBwZXIoe1xuICAgIG5hbWU6ICdzdHJpcGUtanMnLFxuICAgIHZlcnNpb246IFwiMS41NC4yXCIsXG4gICAgc3RhcnRUaW1lOiBzdGFydFRpbWVcbiAgfSk7XG59O1xuXG52YXIgc3RyaXBlUHJvbWlzZSA9IG51bGw7XG52YXIgbG9hZFNjcmlwdCA9IGZ1bmN0aW9uIGxvYWRTY3JpcHQocGFyYW1zKSB7XG4gIC8vIEVuc3VyZSB0aGF0IHdlIG9ubHkgYXR0ZW1wdCB0byBsb2FkIFN0cmlwZS5qcyBhdCBtb3N0IG9uY2VcbiAgaWYgKHN0cmlwZVByb21pc2UgIT09IG51bGwpIHtcbiAgICByZXR1cm4gc3RyaXBlUHJvbWlzZTtcbiAgfVxuXG4gIHN0cmlwZVByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIFJlc29sdmUgdG8gbnVsbCB3aGVuIGltcG9ydGVkIHNlcnZlciBzaWRlLiBUaGlzIG1ha2VzIHRoZSBtb2R1bGVcbiAgICAgIC8vIHNhZmUgdG8gaW1wb3J0IGluIGFuIGlzb21vcnBoaWMgY29kZSBiYXNlLlxuICAgICAgcmVzb2x2ZShudWxsKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAod2luZG93LlN0cmlwZSAmJiBwYXJhbXMpIHtcbiAgICAgIGNvbnNvbGUud2FybihFWElTVElOR19TQ1JJUFRfTUVTU0FHRSk7XG4gICAgfVxuXG4gICAgaWYgKHdpbmRvdy5TdHJpcGUpIHtcbiAgICAgIHJlc29sdmUod2luZG93LlN0cmlwZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHZhciBzY3JpcHQgPSBmaW5kU2NyaXB0KCk7XG5cbiAgICAgIGlmIChzY3JpcHQgJiYgcGFyYW1zKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihFWElTVElOR19TQ1JJUFRfTUVTU0FHRSk7XG4gICAgICB9IGVsc2UgaWYgKCFzY3JpcHQpIHtcbiAgICAgICAgc2NyaXB0ID0gaW5qZWN0U2NyaXB0KHBhcmFtcyk7XG4gICAgICB9XG5cbiAgICAgIHNjcmlwdC5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAod2luZG93LlN0cmlwZSkge1xuICAgICAgICAgIHJlc29sdmUod2luZG93LlN0cmlwZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignU3RyaXBlLmpzIG5vdCBhdmFpbGFibGUnKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgc2NyaXB0LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZWplY3QobmV3IEVycm9yKCdGYWlsZWQgdG8gbG9hZCBTdHJpcGUuanMnKSk7XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gc3RyaXBlUHJvbWlzZTtcbn07XG52YXIgaW5pdFN0cmlwZSA9IGZ1bmN0aW9uIGluaXRTdHJpcGUobWF5YmVTdHJpcGUsIGFyZ3MsIHN0YXJ0VGltZSkge1xuICBpZiAobWF5YmVTdHJpcGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBzdHJpcGUgPSBtYXliZVN0cmlwZS5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICByZWdpc3RlcldyYXBwZXIoc3RyaXBlLCBzdGFydFRpbWUpO1xuICByZXR1cm4gc3RyaXBlO1xufTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1tb2R1bGUtYm91bmRhcnktdHlwZXNcblxuLy8gb3duIHNjcmlwdCBpbmplY3Rpb24uXG5cbnZhciBzdHJpcGVQcm9taXNlJDEgPSBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGxvYWRTY3JpcHQobnVsbCk7XG59KTtcbnZhciBsb2FkQ2FsbGVkID0gZmFsc2U7XG5zdHJpcGVQcm9taXNlJDFbXCJjYXRjaFwiXShmdW5jdGlvbiAoZXJyKSB7XG4gIGlmICghbG9hZENhbGxlZCkge1xuICAgIGNvbnNvbGUud2FybihlcnIpO1xuICB9XG59KTtcbnZhciBsb2FkU3RyaXBlID0gZnVuY3Rpb24gbG9hZFN0cmlwZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGxvYWRDYWxsZWQgPSB0cnVlO1xuICB2YXIgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgcmV0dXJuIHN0cmlwZVByb21pc2UkMS50aGVuKGZ1bmN0aW9uIChtYXliZVN0cmlwZSkge1xuICAgIHJldHVybiBpbml0U3RyaXBlKG1heWJlU3RyaXBlLCBhcmdzLCBzdGFydFRpbWUpO1xuICB9KTtcbn07XG5cbmV4cG9ydCB7IGxvYWRTdHJpcGUgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/use-shopping-cart/node_modules/@stripe/stripe-js/dist/stripe.esm.js\n");

/***/ })

};
;